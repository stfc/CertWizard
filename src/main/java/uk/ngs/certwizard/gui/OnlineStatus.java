package uk.ngs.certwizard.gui;

import java.awt.Color;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import uk.ngs.ca.certificate.client.PingService;
import uk.ngs.ca.common.GuiExecutor;

/**
 * Display the current online status of the tool and set the application's
 * <code>SystemStatus.ISONLINE</code> property. Thread safe.
 *
 * @author David Meredith
 */
public class OnlineStatus extends javax.swing.JPanel {

    private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
    // Records whether the last ping check completed ok 
    private AtomicBoolean pingedOK = new AtomicBoolean(false);

    /**
     * Creates new form OnlineStatus
     */
    public OnlineStatus() {
        initComponents();
        this.timeoutTextField.setVisible(false);
        this.jLabel2.setVisible(false);
    }

    /**
     * Starts the periodic Ping task in a background thread.
     */
    public void startScheduledPingCheckTask() {
        // DM: I wanted to use a SwingWorker and a property change listener on the
        // SwingWorker 'state' property as this gives more control, however
        // this top 25 bug (SwingWorker deadlocks due to 
        // one thread in the swingworker-pool) caused me issues so i use a 
        // simple runnable instead. 
        // http://bugs.sun.com/view_bug.do;jsessionid=e13cfc6ea10a4ffffffffce8c9244b60e54d?bug_id=6880336 
        //pingTask = new PingTask();
        //pingTask.addPropertyChangeListener(pingTaskPropertyListener);
        executor.scheduleWithFixedDelay(new PingCheckTask(), 0, 10, TimeUnit.MINUTES);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        onlineLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        timeoutTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cancelPingButton = new javax.swing.JButton();

        setToolTipText("Online CA status indicates whether the tool can contact the UK Certification Authority Server");

        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/arrow_refresh_small.png"))); // NOI18N
        connectButton.setToolTipText("Attempt to ping the CA server to test online connection. ");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        onlineLabel.setForeground(new java.awt.Color(255, 0, 51));
        onlineLabel.setText("Cannot Contact Server - Click help to configure connection.");

        jLabel1.setText("Online Status:");

        timeoutTextField.setText("8");
        timeoutTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeoutTextFieldActionPerformed(evt);
            }
        });
        timeoutTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeoutTextFieldFocusLost(evt);
            }
        });

        jLabel2.setText("Connect timeout (secs)");

        cancelPingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stopRedCrossIcon.gif"))); // NOI18N
        cancelPingButton.setToolTipText("Cancel the online Ping.");
        cancelPingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlineLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(79, 79, 79)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timeoutTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(cancelPingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(cancelPingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(timeoutTextField)
                .addComponent(jLabel2))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(onlineLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        //System.setProperty("http.proxyHost", "wwwcache.dl.ac.uk");
        this.doPingCheckActionPerformed();
    }//GEN-LAST:event_connectButtonActionPerformed

private void timeoutTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeoutTextFieldActionPerformed
    //this.doChangeTimeout();
}//GEN-LAST:event_timeoutTextFieldActionPerformed

private void timeoutTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeoutTextFieldFocusLost
    //this.doChangeTimeout();
}//GEN-LAST:event_timeoutTextFieldFocusLost

    private void cancelPingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPingButtonActionPerformed
        this.updateGUI(false);
    }//GEN-LAST:event_cancelPingButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelPingButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel onlineLabel;
    private javax.swing.JTextField timeoutTextField;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Attempt a ping check and update our global state.
     */
    private void doPingCheckActionPerformed() {
        // Clicking to start this task should not clash with another ping task 
        // because the button that calls this method is disabled when a task
        // executes. 
        //sleepTask = null; 
        Runnable sleepTask = new PingCheckTask();
        Thread t = new Thread(sleepTask);
        t.setDaemon(true);
        t.start();
    }

    /**
     * Updates the GUI. Guarantees to run the GUI updates in the AWT event
     * dispatch thread.
     *
     * @param running
     */
    private void updateGUI(final boolean running) {
        GuiExecutor.instance().execute(new Runnable() {
            public void run() {
                if (running) {
                    onlineLabel.setText("Pinging Server...");
                    onlineLabel.setForeground(Color.RED);
                    connectButton.setEnabled(false);
                    cancelPingButton.setEnabled(true);
                } else {
                    Date lastOnline = new Date();
                    if (pingedOK.get()) {
                        onlineLabel.setText("Last online check at:  " + lastOnline.toString());
                        onlineLabel.setForeground(new Color(0, 153, 0));
                    } else {
                        onlineLabel.setText("Last online check failed at:  " + lastOnline.toString());
                        onlineLabel.setForeground(Color.RED);
                    }
                    connectButton.setEnabled(true);
                    cancelPingButton.setEnabled(false);
                }
            }
        });
    }

    private class PingCheckTask implements Runnable {

        @Override
        public void run() {
            try {
                updateGUI(true);
                // call the ping in new thread
                pingedOK.set(PingService.getPingService().isPingService());
            } finally {
                updateGUI(false);
            }
        }
    }
}
