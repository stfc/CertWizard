package uk.ngs.certwizard.gui;

import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import uk.ngs.ca.certificate.client.PingService;
import uk.ngs.ca.common.SystemStatus;

/**
 * Display the current online status of the tool according to the application's 
 * <code>SystemStatus.ISONLINE</code> property. Thread safe.
 *
 * @author David Meredith
 */
public class OnlineStatus extends javax.swing.JPanel implements Observer {

    /** Creates new form OnlineStatus */
    public OnlineStatus() {
        initComponents();
        this.connectButton.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        onlineLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setToolTipText("Online CA status indicates whether the tool can contact the UK Certification Authority Server");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        onlineLabel.setForeground(new java.awt.Color(255, 0, 51));
        onlineLabel.setText("Cannot Contact CA Server - Please check your network connection.");

        jLabel1.setText("Online CA Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(connectButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(connectButton)
                .addComponent(jLabel1)
                .addComponent(onlineLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        //System.setProperty("http.proxyHost", "wwwcache.dl.ac.uk");
        this.doPingCheckActionPerformed();
    }//GEN-LAST:event_connectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel onlineLabel;
    // End of variables declaration//GEN-END:variables


    /**
     * Attempt a ping check and update our global state. This will block
     * until completed which avoids re-clicking while trying to connect.
     */
    private void doPingCheckActionPerformed(){
        // calling isPingService will call SystemStatus.setIsOnline(bool) which
        // will subsequently invoke update below if the state changes.
        PingService.getPingService().isPingService();
    }


    /**
     * Update this panels online status GUI components based on the 
     * <code>SystemStatus.ISONLINE</code> property. Thread safe. 
     */
    public void update(Observable o, Object arg) {
        //System.out.println("update called");
        if ( SystemStatus.getInstance().getIsOnline() ) {
            this.onlineLabel.setText("Online");
            this.onlineLabel.setForeground(new Color(0, 153, 0));
            this.connectButton.setText("Reconnect");
        } else {
            this.onlineLabel.setText("Cannot Contact CA Server - Please check your network connection.");
            this.onlineLabel.setForeground(Color.RED);
            this.connectButton.setText("Connect");
        }
    }




}
