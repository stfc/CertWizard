/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PasswordPanel.java
 *
 * Created on 20-Jul-2010, 14:48:14
 */
package uk.ngs.certwizard.gui;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import uk.ngs.ca.common.SystemStatus;
import uk.ngs.ca.common.LocalBackup;
import uk.ngs.ca.tools.property.SysProperty;

/**
 *
 * @author xw75
 */
public class PasswordPanel extends javax.swing.JPanel {

    String message = "";
    String messageTitle = "";
    boolean online;
    private JPanel getCertPanel;
    private SystemStatus sysStatus = null;

    private boolean isExistKeyStore = false;

    private CertWizardMain _certWizardMain = null;

    /** Creates new form Password */
    public PasswordPanel(CertWizardMain _certWizardMain) {

        initComponents();

//        this.setFocusable(true);
//        txtPassword.requestFocusInWindow();
        
        this._certWizardMain = _certWizardMain;
        getCertPanel = this._certWizardMain.getCertificatePanel();

        //this.sysStatus = new SystemStatus();
        this.sysStatus = SystemStatus.getInstance(); 
        this.isExistKeyStore = this.sysStatus.isExistKeyStore();
        if ( this.isExistKeyStore ) {
            jLabel3.setVisible(false);
            txtConfirmPassword.setVisible(false);
            messageLabel.setText("<html>Please enter your password.</html>");
        } else {
            jLabel3.setVisible(true);
            txtConfirmPassword.setVisible(true);
            messageLabel.setText("<html>Please enter and confirm a new password.</html>");
        }
        okButton.setEnabled(false);

    }

    /*public PasswordPanel(String message, String messageTitle) {
        initComponents();
        this.message = message;
        this.messageTitle = messageTitle;
    }*/

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        okButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();

        jLabel1.setText("Password:");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Confirm:");

        txtConfirmPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConfirmPasswordActionPerformed(evt);
            }
        });
        txtConfirmPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConfirmPasswordKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel3))
                        .add(48, 48, 48)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(okButton)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(txtConfirmPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(messageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(messageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(txtConfirmPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(okButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
//        messageLabel.setText("<html>Please Wait..</html>");
        if( this.isExistKeyStore ){            
            loadMainWindowPanel();
        }else{
            String password = new String( txtPassword.getPassword() );
            String confirm = new String( txtConfirmPassword.getPassword() );
            if( password.equals(confirm) ){
                loadMainWindowPanel();
            }else{
                String errorMessage = "The passwords should match.";
                JOptionPane.showMessageDialog(this, errorMessage, "Wrong Password", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Compare passwords and create/show a new instance of MainWindowPanel if the
     * passwords are correct. Otherwise, show an error on the panel. 
     */
    private void loadMainWindowPanel() {
        
        char[] passphrase = txtPassword.getPassword();
        boolean isValid = this.sysStatus.isValidPassphrase(passphrase);

        if (isValid) {
            String _pswdProperty = SysProperty.getValue("uk.ngs.ca.passphrase.property");
            String _pswd = new String( this.txtPassword.getPassword() );
            System.setProperty(_pswdProperty, _pswd);

            LocalBackup localBackup = new LocalBackup();
//later we need to provide further message if any error happens.
            localBackup.isSuccess();

            getCertPanel.remove(this);
            MainWindowPanel2 mainpane = new MainWindowPanel2(passphrase, this._certWizardMain);
            mainpane.setSize(800, 500);
            getCertPanel.add(mainpane, "MainWindowPanel");
            getCertPanel.revalidate();

        } else {
            
            String errorMessage = sysStatus.getErrorMessage();
            JOptionPane.showMessageDialog(this, errorMessage, "Wrong Password", JOptionPane.ERROR_MESSAGE);
            txtPassword.setText("");

        }
    }

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
        if( this.isExistKeyStore ){
            loadMainWindowPanel();
        }else{
            String password = new String( txtPassword.getPassword() );
            String confirm = new String( txtConfirmPassword.getPassword() );
            if( password.equals(confirm) ){
                loadMainWindowPanel();
            }else{
                String errorMessage = "The passwords should match.";
                JOptionPane.showMessageDialog(this, errorMessage, "Wrong Password", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        // TODO add your handling code here:
        if( this.isExistKeyStore ){
            this.okButton.setEnabled(true);
        }else{
            String password = new String( txtPassword.getPassword() );
            String confirm = new String( txtConfirmPassword.getPassword() );
            if( password.equals(confirm) ){
                this.okButton.setEnabled(true);
            }else{
                this.okButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_txtPasswordKeyReleased

    private void txtConfirmPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConfirmPasswordKeyReleased
        // TODO add your handling code here:
        String password = new String( txtPassword.getPassword() );
        String confirm = new String( txtConfirmPassword.getPassword() );

        if( password.equals(confirm) ){
            this.okButton.setEnabled(true);
        }else{
            this.okButton.setEnabled(false);
        }
    }//GEN-LAST:event_txtConfirmPasswordKeyReleased

    private void txtConfirmPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConfirmPasswordActionPerformed
        // TODO add your handling code here:
        String password = new String( txtPassword.getPassword() );
        String confirm = new String( txtConfirmPassword.getPassword() );
        if( password.equals(confirm) ){
            loadMainWindowPanel();
        }else{
            String errorMessage = "The passwords should match.";
            JOptionPane.showMessageDialog(this, errorMessage, "Wrong Password", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtConfirmPasswordActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}
